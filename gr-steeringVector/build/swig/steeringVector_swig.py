# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_steeringVector_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_steeringVector_swig')
    _steeringVector_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_steeringVector_swig', [dirname(__file__)])
        except ImportError:
            import _steeringVector_swig
            return _steeringVector_swig
        try:
            _mod = imp.load_module('_steeringVector_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _steeringVector_swig = swig_import_helper()
    del swig_import_helper
else:
    import _steeringVector_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _steeringVector_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _steeringVector_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _steeringVector_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _steeringVector_swig.high_res_timer_epoch()
class steeringVector(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::steeringVector.

    To avoid accidental use of raw pointers, steeringVector::steeringVector's constructor is in a private implementation class. steeringVector::steeringVector::make is the public interface for creating new instances.

    Args:
        refAngle : 
        vectorLength : 
        arrayLength : 
        arraySpacing : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(refAngle, vectorLength, arrayLength, arraySpacing):
        """
        make(int refAngle, int vectorLength, int arrayLength, float arraySpacing) -> steeringVector_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::steeringVector.

        To avoid accidental use of raw pointers, steeringVector::steeringVector's constructor is in a private implementation class. steeringVector::steeringVector::make is the public interface for creating new instances.

        Args:
            refAngle : 
            vectorLength : 
            arrayLength : 
            arraySpacing : 
        """
        return _steeringVector_swig.steeringVector_make(refAngle, vectorLength, arrayLength, arraySpacing)

    make = staticmethod(make)
    __swig_destroy__ = _steeringVector_swig.delete_steeringVector
    __del__ = lambda self: None
steeringVector_swigregister = _steeringVector_swig.steeringVector_swigregister
steeringVector_swigregister(steeringVector)

def steeringVector_make(refAngle, vectorLength, arrayLength, arraySpacing):
    """
    steeringVector_make(int refAngle, int vectorLength, int arrayLength, float arraySpacing) -> steeringVector_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::steeringVector.

    To avoid accidental use of raw pointers, steeringVector::steeringVector's constructor is in a private implementation class. steeringVector::steeringVector::make is the public interface for creating new instances.

    Args:
        refAngle : 
        vectorLength : 
        arrayLength : 
        arraySpacing : 
    """
    return _steeringVector_swig.steeringVector_make(refAngle, vectorLength, arrayLength, arraySpacing)

class steeringVector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::steeringVector::steeringVector)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::steeringVector::steeringVector)> self) -> steeringVector_sptr
        __init__(boost::shared_ptr<(gr::steeringVector::steeringVector)> self, steeringVector p) -> steeringVector_sptr
        """
        this = _steeringVector_swig.new_steeringVector_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(steeringVector_sptr self) -> steeringVector"""
        return _steeringVector_swig.steeringVector_sptr___deref__(self)

    __swig_destroy__ = _steeringVector_swig.delete_steeringVector_sptr
    __del__ = lambda self: None

    def make(self, refAngle, vectorLength, arrayLength, arraySpacing):
        """
        make(steeringVector_sptr self, int refAngle, int vectorLength, int arrayLength, float arraySpacing) -> steeringVector_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::steeringVector.

        To avoid accidental use of raw pointers, steeringVector::steeringVector's constructor is in a private implementation class. steeringVector::steeringVector::make is the public interface for creating new instances.

        Args:
            refAngle : 
            vectorLength : 
            arrayLength : 
            arraySpacing : 
        """
        return _steeringVector_swig.steeringVector_sptr_make(self, refAngle, vectorLength, arrayLength, arraySpacing)


    def history(self):
        """history(steeringVector_sptr self) -> unsigned int"""
        return _steeringVector_swig.steeringVector_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(steeringVector_sptr self, int which, int delay)
        declare_sample_delay(steeringVector_sptr self, unsigned int delay)
        """
        return _steeringVector_swig.steeringVector_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(steeringVector_sptr self, int which) -> unsigned int"""
        return _steeringVector_swig.steeringVector_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(steeringVector_sptr self) -> int"""
        return _steeringVector_swig.steeringVector_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(steeringVector_sptr self) -> double"""
        return _steeringVector_swig.steeringVector_sptr_relative_rate(self)


    def start(self):
        """start(steeringVector_sptr self) -> bool"""
        return _steeringVector_swig.steeringVector_sptr_start(self)


    def stop(self):
        """stop(steeringVector_sptr self) -> bool"""
        return _steeringVector_swig.steeringVector_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(steeringVector_sptr self, unsigned int which_input) -> uint64_t"""
        return _steeringVector_swig.steeringVector_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(steeringVector_sptr self, unsigned int which_output) -> uint64_t"""
        return _steeringVector_swig.steeringVector_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(steeringVector_sptr self) -> int"""
        return _steeringVector_swig.steeringVector_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(steeringVector_sptr self, int m)"""
        return _steeringVector_swig.steeringVector_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(steeringVector_sptr self)"""
        return _steeringVector_swig.steeringVector_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(steeringVector_sptr self) -> bool"""
        return _steeringVector_swig.steeringVector_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(steeringVector_sptr self, int m)"""
        return _steeringVector_swig.steeringVector_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(steeringVector_sptr self) -> int"""
        return _steeringVector_swig.steeringVector_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(steeringVector_sptr self, int i) -> long"""
        return _steeringVector_swig.steeringVector_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(steeringVector_sptr self, long max_output_buffer)
        set_max_output_buffer(steeringVector_sptr self, int port, long max_output_buffer)
        """
        return _steeringVector_swig.steeringVector_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(steeringVector_sptr self, int i) -> long"""
        return _steeringVector_swig.steeringVector_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(steeringVector_sptr self, long min_output_buffer)
        set_min_output_buffer(steeringVector_sptr self, int port, long min_output_buffer)
        """
        return _steeringVector_swig.steeringVector_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(steeringVector_sptr self, int which) -> float
        pc_input_buffers_full(steeringVector_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.steeringVector_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(steeringVector_sptr self, int which) -> float
        pc_input_buffers_full_avg(steeringVector_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.steeringVector_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(steeringVector_sptr self, int which) -> float
        pc_input_buffers_full_var(steeringVector_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.steeringVector_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(steeringVector_sptr self, int which) -> float
        pc_output_buffers_full(steeringVector_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.steeringVector_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(steeringVector_sptr self, int which) -> float
        pc_output_buffers_full_avg(steeringVector_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.steeringVector_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(steeringVector_sptr self, int which) -> float
        pc_output_buffers_full_var(steeringVector_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.steeringVector_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(steeringVector_sptr self) -> float"""
        return _steeringVector_swig.steeringVector_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(steeringVector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _steeringVector_swig.steeringVector_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(steeringVector_sptr self)"""
        return _steeringVector_swig.steeringVector_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(steeringVector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _steeringVector_swig.steeringVector_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(steeringVector_sptr self) -> int"""
        return _steeringVector_swig.steeringVector_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(steeringVector_sptr self) -> int"""
        return _steeringVector_swig.steeringVector_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(steeringVector_sptr self, int priority) -> int"""
        return _steeringVector_swig.steeringVector_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(steeringVector_sptr self) -> std::string"""
        return _steeringVector_swig.steeringVector_sptr_name(self)


    def symbol_name(self):
        """symbol_name(steeringVector_sptr self) -> std::string"""
        return _steeringVector_swig.steeringVector_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(steeringVector_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.steeringVector_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(steeringVector_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.steeringVector_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(steeringVector_sptr self) -> long"""
        return _steeringVector_swig.steeringVector_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(steeringVector_sptr self) -> basic_block_sptr"""
        return _steeringVector_swig.steeringVector_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(steeringVector_sptr self, int ninputs, int noutputs) -> bool"""
        return _steeringVector_swig.steeringVector_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(steeringVector_sptr self) -> std::string"""
        return _steeringVector_swig.steeringVector_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(steeringVector_sptr self, std::string name)"""
        return _steeringVector_swig.steeringVector_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(steeringVector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _steeringVector_swig.steeringVector_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(steeringVector_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.steeringVector_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(steeringVector_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.steeringVector_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(steeringVector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _steeringVector_swig.steeringVector_sptr_message_subscribers(self, which_port)

steeringVector_sptr_swigregister = _steeringVector_swig.steeringVector_sptr_swigregister
steeringVector_sptr_swigregister(steeringVector_sptr)


steeringVector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
steeringVector = steeringVector.make;

class phaseOffset(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::phaseOffset.

    To avoid accidental use of raw pointers, steeringVector::phaseOffset's constructor is in a private implementation class. steeringVector::phaseOffset::make is the public interface for creating new instances.

    Args:
        vector_length : 
        vector_count : 
        isActive : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_length, vector_count, isActive):
        """
        make(int vector_length, int vector_count, bool isActive) -> phaseOffset_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::phaseOffset.

        To avoid accidental use of raw pointers, steeringVector::phaseOffset's constructor is in a private implementation class. steeringVector::phaseOffset::make is the public interface for creating new instances.

        Args:
            vector_length : 
            vector_count : 
            isActive : 
        """
        return _steeringVector_swig.phaseOffset_make(vector_length, vector_count, isActive)

    make = staticmethod(make)
    __swig_destroy__ = _steeringVector_swig.delete_phaseOffset
    __del__ = lambda self: None
phaseOffset_swigregister = _steeringVector_swig.phaseOffset_swigregister
phaseOffset_swigregister(phaseOffset)

def phaseOffset_make(vector_length, vector_count, isActive):
    """
    phaseOffset_make(int vector_length, int vector_count, bool isActive) -> phaseOffset_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::phaseOffset.

    To avoid accidental use of raw pointers, steeringVector::phaseOffset's constructor is in a private implementation class. steeringVector::phaseOffset::make is the public interface for creating new instances.

    Args:
        vector_length : 
        vector_count : 
        isActive : 
    """
    return _steeringVector_swig.phaseOffset_make(vector_length, vector_count, isActive)

class phaseOffset_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::steeringVector::phaseOffset)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::steeringVector::phaseOffset)> self) -> phaseOffset_sptr
        __init__(boost::shared_ptr<(gr::steeringVector::phaseOffset)> self, phaseOffset p) -> phaseOffset_sptr
        """
        this = _steeringVector_swig.new_phaseOffset_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(phaseOffset_sptr self) -> phaseOffset"""
        return _steeringVector_swig.phaseOffset_sptr___deref__(self)

    __swig_destroy__ = _steeringVector_swig.delete_phaseOffset_sptr
    __del__ = lambda self: None

    def make(self, vector_length, vector_count, isActive):
        """
        make(phaseOffset_sptr self, int vector_length, int vector_count, bool isActive) -> phaseOffset_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::phaseOffset.

        To avoid accidental use of raw pointers, steeringVector::phaseOffset's constructor is in a private implementation class. steeringVector::phaseOffset::make is the public interface for creating new instances.

        Args:
            vector_length : 
            vector_count : 
            isActive : 
        """
        return _steeringVector_swig.phaseOffset_sptr_make(self, vector_length, vector_count, isActive)


    def history(self):
        """history(phaseOffset_sptr self) -> unsigned int"""
        return _steeringVector_swig.phaseOffset_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(phaseOffset_sptr self, int which, int delay)
        declare_sample_delay(phaseOffset_sptr self, unsigned int delay)
        """
        return _steeringVector_swig.phaseOffset_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(phaseOffset_sptr self, int which) -> unsigned int"""
        return _steeringVector_swig.phaseOffset_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(phaseOffset_sptr self) -> int"""
        return _steeringVector_swig.phaseOffset_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(phaseOffset_sptr self) -> double"""
        return _steeringVector_swig.phaseOffset_sptr_relative_rate(self)


    def start(self):
        """start(phaseOffset_sptr self) -> bool"""
        return _steeringVector_swig.phaseOffset_sptr_start(self)


    def stop(self):
        """stop(phaseOffset_sptr self) -> bool"""
        return _steeringVector_swig.phaseOffset_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(phaseOffset_sptr self, unsigned int which_input) -> uint64_t"""
        return _steeringVector_swig.phaseOffset_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(phaseOffset_sptr self, unsigned int which_output) -> uint64_t"""
        return _steeringVector_swig.phaseOffset_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(phaseOffset_sptr self) -> int"""
        return _steeringVector_swig.phaseOffset_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(phaseOffset_sptr self, int m)"""
        return _steeringVector_swig.phaseOffset_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(phaseOffset_sptr self)"""
        return _steeringVector_swig.phaseOffset_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(phaseOffset_sptr self) -> bool"""
        return _steeringVector_swig.phaseOffset_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(phaseOffset_sptr self, int m)"""
        return _steeringVector_swig.phaseOffset_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(phaseOffset_sptr self) -> int"""
        return _steeringVector_swig.phaseOffset_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(phaseOffset_sptr self, int i) -> long"""
        return _steeringVector_swig.phaseOffset_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(phaseOffset_sptr self, long max_output_buffer)
        set_max_output_buffer(phaseOffset_sptr self, int port, long max_output_buffer)
        """
        return _steeringVector_swig.phaseOffset_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(phaseOffset_sptr self, int i) -> long"""
        return _steeringVector_swig.phaseOffset_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(phaseOffset_sptr self, long min_output_buffer)
        set_min_output_buffer(phaseOffset_sptr self, int port, long min_output_buffer)
        """
        return _steeringVector_swig.phaseOffset_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(phaseOffset_sptr self, int which) -> float
        pc_input_buffers_full(phaseOffset_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.phaseOffset_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(phaseOffset_sptr self, int which) -> float
        pc_input_buffers_full_avg(phaseOffset_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.phaseOffset_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(phaseOffset_sptr self, int which) -> float
        pc_input_buffers_full_var(phaseOffset_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.phaseOffset_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(phaseOffset_sptr self, int which) -> float
        pc_output_buffers_full(phaseOffset_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.phaseOffset_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(phaseOffset_sptr self, int which) -> float
        pc_output_buffers_full_avg(phaseOffset_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.phaseOffset_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(phaseOffset_sptr self, int which) -> float
        pc_output_buffers_full_var(phaseOffset_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.phaseOffset_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(phaseOffset_sptr self) -> float"""
        return _steeringVector_swig.phaseOffset_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(phaseOffset_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _steeringVector_swig.phaseOffset_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(phaseOffset_sptr self)"""
        return _steeringVector_swig.phaseOffset_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(phaseOffset_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _steeringVector_swig.phaseOffset_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(phaseOffset_sptr self) -> int"""
        return _steeringVector_swig.phaseOffset_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(phaseOffset_sptr self) -> int"""
        return _steeringVector_swig.phaseOffset_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(phaseOffset_sptr self, int priority) -> int"""
        return _steeringVector_swig.phaseOffset_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(phaseOffset_sptr self) -> std::string"""
        return _steeringVector_swig.phaseOffset_sptr_name(self)


    def symbol_name(self):
        """symbol_name(phaseOffset_sptr self) -> std::string"""
        return _steeringVector_swig.phaseOffset_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(phaseOffset_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.phaseOffset_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(phaseOffset_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.phaseOffset_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(phaseOffset_sptr self) -> long"""
        return _steeringVector_swig.phaseOffset_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(phaseOffset_sptr self) -> basic_block_sptr"""
        return _steeringVector_swig.phaseOffset_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(phaseOffset_sptr self, int ninputs, int noutputs) -> bool"""
        return _steeringVector_swig.phaseOffset_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(phaseOffset_sptr self) -> std::string"""
        return _steeringVector_swig.phaseOffset_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(phaseOffset_sptr self, std::string name)"""
        return _steeringVector_swig.phaseOffset_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(phaseOffset_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _steeringVector_swig.phaseOffset_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(phaseOffset_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.phaseOffset_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(phaseOffset_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.phaseOffset_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(phaseOffset_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _steeringVector_swig.phaseOffset_sptr_message_subscribers(self, which_port)

phaseOffset_sptr_swigregister = _steeringVector_swig.phaseOffset_sptr_swigregister
phaseOffset_sptr_swigregister(phaseOffset_sptr)


phaseOffset_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
phaseOffset = phaseOffset.make;

class messageAtThreshold(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::messageAtThreshold.

    To avoid accidental use of raw pointers, steeringVector::messageAtThreshold's constructor is in a private implementation class. steeringVector::messageAtThreshold::make is the public interface for creating new instances.

    Args:
        isActive : 
        vector_count : 
        threshLow : 
        threshHigh : 
        initial_state : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(isActive, vector_count, threshLow, threshHigh, initial_state):
        """
        make(bool isActive, int vector_count, float threshLow, float threshHigh, float initial_state) -> messageAtThreshold_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::messageAtThreshold.

        To avoid accidental use of raw pointers, steeringVector::messageAtThreshold's constructor is in a private implementation class. steeringVector::messageAtThreshold::make is the public interface for creating new instances.

        Args:
            isActive : 
            vector_count : 
            threshLow : 
            threshHigh : 
            initial_state : 
        """
        return _steeringVector_swig.messageAtThreshold_make(isActive, vector_count, threshLow, threshHigh, initial_state)

    make = staticmethod(make)

    def set_isActive(self, d):
        """set_isActive(messageAtThreshold self, bool d)"""
        return _steeringVector_swig.messageAtThreshold_set_isActive(self, d)

    __swig_destroy__ = _steeringVector_swig.delete_messageAtThreshold
    __del__ = lambda self: None
messageAtThreshold_swigregister = _steeringVector_swig.messageAtThreshold_swigregister
messageAtThreshold_swigregister(messageAtThreshold)

def messageAtThreshold_make(isActive, vector_count, threshLow, threshHigh, initial_state):
    """
    messageAtThreshold_make(bool isActive, int vector_count, float threshLow, float threshHigh, float initial_state) -> messageAtThreshold_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::messageAtThreshold.

    To avoid accidental use of raw pointers, steeringVector::messageAtThreshold's constructor is in a private implementation class. steeringVector::messageAtThreshold::make is the public interface for creating new instances.

    Args:
        isActive : 
        vector_count : 
        threshLow : 
        threshHigh : 
        initial_state : 
    """
    return _steeringVector_swig.messageAtThreshold_make(isActive, vector_count, threshLow, threshHigh, initial_state)

class messageAtThreshold_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::steeringVector::messageAtThreshold)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::steeringVector::messageAtThreshold)> self) -> messageAtThreshold_sptr
        __init__(boost::shared_ptr<(gr::steeringVector::messageAtThreshold)> self, messageAtThreshold p) -> messageAtThreshold_sptr
        """
        this = _steeringVector_swig.new_messageAtThreshold_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(messageAtThreshold_sptr self) -> messageAtThreshold"""
        return _steeringVector_swig.messageAtThreshold_sptr___deref__(self)

    __swig_destroy__ = _steeringVector_swig.delete_messageAtThreshold_sptr
    __del__ = lambda self: None

    def make(self, isActive, vector_count, threshLow, threshHigh, initial_state):
        """
        make(messageAtThreshold_sptr self, bool isActive, int vector_count, float threshLow, float threshHigh, float initial_state) -> messageAtThreshold_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::messageAtThreshold.

        To avoid accidental use of raw pointers, steeringVector::messageAtThreshold's constructor is in a private implementation class. steeringVector::messageAtThreshold::make is the public interface for creating new instances.

        Args:
            isActive : 
            vector_count : 
            threshLow : 
            threshHigh : 
            initial_state : 
        """
        return _steeringVector_swig.messageAtThreshold_sptr_make(self, isActive, vector_count, threshLow, threshHigh, initial_state)


    def set_isActive(self, d):
        """set_isActive(messageAtThreshold_sptr self, bool d)"""
        return _steeringVector_swig.messageAtThreshold_sptr_set_isActive(self, d)


    def history(self):
        """history(messageAtThreshold_sptr self) -> unsigned int"""
        return _steeringVector_swig.messageAtThreshold_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(messageAtThreshold_sptr self, int which, int delay)
        declare_sample_delay(messageAtThreshold_sptr self, unsigned int delay)
        """
        return _steeringVector_swig.messageAtThreshold_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(messageAtThreshold_sptr self, int which) -> unsigned int"""
        return _steeringVector_swig.messageAtThreshold_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(messageAtThreshold_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(messageAtThreshold_sptr self) -> double"""
        return _steeringVector_swig.messageAtThreshold_sptr_relative_rate(self)


    def start(self):
        """start(messageAtThreshold_sptr self) -> bool"""
        return _steeringVector_swig.messageAtThreshold_sptr_start(self)


    def stop(self):
        """stop(messageAtThreshold_sptr self) -> bool"""
        return _steeringVector_swig.messageAtThreshold_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(messageAtThreshold_sptr self, unsigned int which_input) -> uint64_t"""
        return _steeringVector_swig.messageAtThreshold_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(messageAtThreshold_sptr self, unsigned int which_output) -> uint64_t"""
        return _steeringVector_swig.messageAtThreshold_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(messageAtThreshold_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(messageAtThreshold_sptr self, int m)"""
        return _steeringVector_swig.messageAtThreshold_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(messageAtThreshold_sptr self)"""
        return _steeringVector_swig.messageAtThreshold_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(messageAtThreshold_sptr self) -> bool"""
        return _steeringVector_swig.messageAtThreshold_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(messageAtThreshold_sptr self, int m)"""
        return _steeringVector_swig.messageAtThreshold_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(messageAtThreshold_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(messageAtThreshold_sptr self, int i) -> long"""
        return _steeringVector_swig.messageAtThreshold_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(messageAtThreshold_sptr self, long max_output_buffer)
        set_max_output_buffer(messageAtThreshold_sptr self, int port, long max_output_buffer)
        """
        return _steeringVector_swig.messageAtThreshold_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(messageAtThreshold_sptr self, int i) -> long"""
        return _steeringVector_swig.messageAtThreshold_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(messageAtThreshold_sptr self, long min_output_buffer)
        set_min_output_buffer(messageAtThreshold_sptr self, int port, long min_output_buffer)
        """
        return _steeringVector_swig.messageAtThreshold_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(messageAtThreshold_sptr self, int which) -> float
        pc_input_buffers_full(messageAtThreshold_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(messageAtThreshold_sptr self, int which) -> float
        pc_input_buffers_full_avg(messageAtThreshold_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(messageAtThreshold_sptr self, int which) -> float
        pc_input_buffers_full_var(messageAtThreshold_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(messageAtThreshold_sptr self, int which) -> float
        pc_output_buffers_full(messageAtThreshold_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(messageAtThreshold_sptr self, int which) -> float
        pc_output_buffers_full_avg(messageAtThreshold_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(messageAtThreshold_sptr self, int which) -> float
        pc_output_buffers_full_var(messageAtThreshold_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(messageAtThreshold_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(messageAtThreshold_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _steeringVector_swig.messageAtThreshold_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(messageAtThreshold_sptr self)"""
        return _steeringVector_swig.messageAtThreshold_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(messageAtThreshold_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _steeringVector_swig.messageAtThreshold_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(messageAtThreshold_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(messageAtThreshold_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(messageAtThreshold_sptr self, int priority) -> int"""
        return _steeringVector_swig.messageAtThreshold_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(messageAtThreshold_sptr self) -> std::string"""
        return _steeringVector_swig.messageAtThreshold_sptr_name(self)


    def symbol_name(self):
        """symbol_name(messageAtThreshold_sptr self) -> std::string"""
        return _steeringVector_swig.messageAtThreshold_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(messageAtThreshold_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.messageAtThreshold_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(messageAtThreshold_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.messageAtThreshold_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(messageAtThreshold_sptr self) -> long"""
        return _steeringVector_swig.messageAtThreshold_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(messageAtThreshold_sptr self) -> basic_block_sptr"""
        return _steeringVector_swig.messageAtThreshold_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(messageAtThreshold_sptr self, int ninputs, int noutputs) -> bool"""
        return _steeringVector_swig.messageAtThreshold_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(messageAtThreshold_sptr self) -> std::string"""
        return _steeringVector_swig.messageAtThreshold_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(messageAtThreshold_sptr self, std::string name)"""
        return _steeringVector_swig.messageAtThreshold_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(messageAtThreshold_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _steeringVector_swig.messageAtThreshold_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(messageAtThreshold_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.messageAtThreshold_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(messageAtThreshold_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.messageAtThreshold_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(messageAtThreshold_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _steeringVector_swig.messageAtThreshold_sptr_message_subscribers(self, which_port)

messageAtThreshold_sptr_swigregister = _steeringVector_swig.messageAtThreshold_sptr_swigregister
messageAtThreshold_sptr_swigregister(messageAtThreshold_sptr)


messageAtThreshold_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
messageAtThreshold = messageAtThreshold.make;

class sample_offset_multi(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::sample_offset_multi.

    To avoid accidental use of raw pointers, steeringVector::sample_offset_multi's constructor is in a private implementation class. steeringVector::sample_offset_multi::make is the public interface for creating new instances.

    Args:
        vector_length : 
        vector_count : 
        num_inputs : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(vector_length, vector_count, num_inputs):
        """
        make(int vector_length, int vector_count, int num_inputs) -> sample_offset_multi_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::sample_offset_multi.

        To avoid accidental use of raw pointers, steeringVector::sample_offset_multi's constructor is in a private implementation class. steeringVector::sample_offset_multi::make is the public interface for creating new instances.

        Args:
            vector_length : 
            vector_count : 
            num_inputs : 
        """
        return _steeringVector_swig.sample_offset_multi_make(vector_length, vector_count, num_inputs)

    make = staticmethod(make)
    __swig_destroy__ = _steeringVector_swig.delete_sample_offset_multi
    __del__ = lambda self: None
sample_offset_multi_swigregister = _steeringVector_swig.sample_offset_multi_swigregister
sample_offset_multi_swigregister(sample_offset_multi)

def sample_offset_multi_make(vector_length, vector_count, num_inputs):
    """
    sample_offset_multi_make(int vector_length, int vector_count, int num_inputs) -> sample_offset_multi_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::sample_offset_multi.

    To avoid accidental use of raw pointers, steeringVector::sample_offset_multi's constructor is in a private implementation class. steeringVector::sample_offset_multi::make is the public interface for creating new instances.

    Args:
        vector_length : 
        vector_count : 
        num_inputs : 
    """
    return _steeringVector_swig.sample_offset_multi_make(vector_length, vector_count, num_inputs)

class sample_offset_multi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::steeringVector::sample_offset_multi)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::steeringVector::sample_offset_multi)> self) -> sample_offset_multi_sptr
        __init__(boost::shared_ptr<(gr::steeringVector::sample_offset_multi)> self, sample_offset_multi p) -> sample_offset_multi_sptr
        """
        this = _steeringVector_swig.new_sample_offset_multi_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(sample_offset_multi_sptr self) -> sample_offset_multi"""
        return _steeringVector_swig.sample_offset_multi_sptr___deref__(self)

    __swig_destroy__ = _steeringVector_swig.delete_sample_offset_multi_sptr
    __del__ = lambda self: None

    def make(self, vector_length, vector_count, num_inputs):
        """
        make(sample_offset_multi_sptr self, int vector_length, int vector_count, int num_inputs) -> sample_offset_multi_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::sample_offset_multi.

        To avoid accidental use of raw pointers, steeringVector::sample_offset_multi's constructor is in a private implementation class. steeringVector::sample_offset_multi::make is the public interface for creating new instances.

        Args:
            vector_length : 
            vector_count : 
            num_inputs : 
        """
        return _steeringVector_swig.sample_offset_multi_sptr_make(self, vector_length, vector_count, num_inputs)


    def history(self):
        """history(sample_offset_multi_sptr self) -> unsigned int"""
        return _steeringVector_swig.sample_offset_multi_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sample_offset_multi_sptr self, int which, int delay)
        declare_sample_delay(sample_offset_multi_sptr self, unsigned int delay)
        """
        return _steeringVector_swig.sample_offset_multi_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(sample_offset_multi_sptr self, int which) -> unsigned int"""
        return _steeringVector_swig.sample_offset_multi_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(sample_offset_multi_sptr self) -> int"""
        return _steeringVector_swig.sample_offset_multi_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(sample_offset_multi_sptr self) -> double"""
        return _steeringVector_swig.sample_offset_multi_sptr_relative_rate(self)


    def start(self):
        """start(sample_offset_multi_sptr self) -> bool"""
        return _steeringVector_swig.sample_offset_multi_sptr_start(self)


    def stop(self):
        """stop(sample_offset_multi_sptr self) -> bool"""
        return _steeringVector_swig.sample_offset_multi_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(sample_offset_multi_sptr self, unsigned int which_input) -> uint64_t"""
        return _steeringVector_swig.sample_offset_multi_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(sample_offset_multi_sptr self, unsigned int which_output) -> uint64_t"""
        return _steeringVector_swig.sample_offset_multi_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(sample_offset_multi_sptr self) -> int"""
        return _steeringVector_swig.sample_offset_multi_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(sample_offset_multi_sptr self, int m)"""
        return _steeringVector_swig.sample_offset_multi_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sample_offset_multi_sptr self)"""
        return _steeringVector_swig.sample_offset_multi_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sample_offset_multi_sptr self) -> bool"""
        return _steeringVector_swig.sample_offset_multi_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(sample_offset_multi_sptr self, int m)"""
        return _steeringVector_swig.sample_offset_multi_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(sample_offset_multi_sptr self) -> int"""
        return _steeringVector_swig.sample_offset_multi_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(sample_offset_multi_sptr self, int i) -> long"""
        return _steeringVector_swig.sample_offset_multi_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sample_offset_multi_sptr self, long max_output_buffer)
        set_max_output_buffer(sample_offset_multi_sptr self, int port, long max_output_buffer)
        """
        return _steeringVector_swig.sample_offset_multi_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(sample_offset_multi_sptr self, int i) -> long"""
        return _steeringVector_swig.sample_offset_multi_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sample_offset_multi_sptr self, long min_output_buffer)
        set_min_output_buffer(sample_offset_multi_sptr self, int port, long min_output_buffer)
        """
        return _steeringVector_swig.sample_offset_multi_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sample_offset_multi_sptr self, int which) -> float
        pc_input_buffers_full(sample_offset_multi_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.sample_offset_multi_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sample_offset_multi_sptr self, int which) -> float
        pc_input_buffers_full_avg(sample_offset_multi_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.sample_offset_multi_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sample_offset_multi_sptr self, int which) -> float
        pc_input_buffers_full_var(sample_offset_multi_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.sample_offset_multi_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sample_offset_multi_sptr self, int which) -> float
        pc_output_buffers_full(sample_offset_multi_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.sample_offset_multi_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sample_offset_multi_sptr self, int which) -> float
        pc_output_buffers_full_avg(sample_offset_multi_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.sample_offset_multi_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sample_offset_multi_sptr self, int which) -> float
        pc_output_buffers_full_var(sample_offset_multi_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.sample_offset_multi_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(sample_offset_multi_sptr self) -> float"""
        return _steeringVector_swig.sample_offset_multi_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(sample_offset_multi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _steeringVector_swig.sample_offset_multi_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(sample_offset_multi_sptr self)"""
        return _steeringVector_swig.sample_offset_multi_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(sample_offset_multi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _steeringVector_swig.sample_offset_multi_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(sample_offset_multi_sptr self) -> int"""
        return _steeringVector_swig.sample_offset_multi_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(sample_offset_multi_sptr self) -> int"""
        return _steeringVector_swig.sample_offset_multi_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(sample_offset_multi_sptr self, int priority) -> int"""
        return _steeringVector_swig.sample_offset_multi_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(sample_offset_multi_sptr self) -> std::string"""
        return _steeringVector_swig.sample_offset_multi_sptr_name(self)


    def symbol_name(self):
        """symbol_name(sample_offset_multi_sptr self) -> std::string"""
        return _steeringVector_swig.sample_offset_multi_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(sample_offset_multi_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.sample_offset_multi_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(sample_offset_multi_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.sample_offset_multi_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(sample_offset_multi_sptr self) -> long"""
        return _steeringVector_swig.sample_offset_multi_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(sample_offset_multi_sptr self) -> basic_block_sptr"""
        return _steeringVector_swig.sample_offset_multi_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(sample_offset_multi_sptr self, int ninputs, int noutputs) -> bool"""
        return _steeringVector_swig.sample_offset_multi_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(sample_offset_multi_sptr self) -> std::string"""
        return _steeringVector_swig.sample_offset_multi_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(sample_offset_multi_sptr self, std::string name)"""
        return _steeringVector_swig.sample_offset_multi_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(sample_offset_multi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _steeringVector_swig.sample_offset_multi_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(sample_offset_multi_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.sample_offset_multi_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(sample_offset_multi_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.sample_offset_multi_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(sample_offset_multi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _steeringVector_swig.sample_offset_multi_sptr_message_subscribers(self, which_port)

sample_offset_multi_sptr_swigregister = _steeringVector_swig.sample_offset_multi_sptr_swigregister
sample_offset_multi_sptr_swigregister(sample_offset_multi_sptr)


sample_offset_multi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sample_offset_multi = sample_offset_multi.make;

class multiplyComplex(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::multiplyComplex.

    To avoid accidental use of raw pointers, steeringVector::multiplyComplex's constructor is in a private implementation class. steeringVector::multiplyComplex::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> multiplyComplex_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::multiplyComplex.

        To avoid accidental use of raw pointers, steeringVector::multiplyComplex's constructor is in a private implementation class. steeringVector::multiplyComplex::make is the public interface for creating new instances.
        """
        return _steeringVector_swig.multiplyComplex_make()

    make = staticmethod(make)
    __swig_destroy__ = _steeringVector_swig.delete_multiplyComplex
    __del__ = lambda self: None
multiplyComplex_swigregister = _steeringVector_swig.multiplyComplex_swigregister
multiplyComplex_swigregister(multiplyComplex)

def multiplyComplex_make():
    """
    multiplyComplex_make() -> multiplyComplex_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of steeringVector::multiplyComplex.

    To avoid accidental use of raw pointers, steeringVector::multiplyComplex's constructor is in a private implementation class. steeringVector::multiplyComplex::make is the public interface for creating new instances.
    """
    return _steeringVector_swig.multiplyComplex_make()

class multiplyComplex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::steeringVector::multiplyComplex)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::steeringVector::multiplyComplex)> self) -> multiplyComplex_sptr
        __init__(boost::shared_ptr<(gr::steeringVector::multiplyComplex)> self, multiplyComplex p) -> multiplyComplex_sptr
        """
        this = _steeringVector_swig.new_multiplyComplex_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(multiplyComplex_sptr self) -> multiplyComplex"""
        return _steeringVector_swig.multiplyComplex_sptr___deref__(self)

    __swig_destroy__ = _steeringVector_swig.delete_multiplyComplex_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(multiplyComplex_sptr self) -> multiplyComplex_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of steeringVector::multiplyComplex.

        To avoid accidental use of raw pointers, steeringVector::multiplyComplex's constructor is in a private implementation class. steeringVector::multiplyComplex::make is the public interface for creating new instances.
        """
        return _steeringVector_swig.multiplyComplex_sptr_make(self)


    def history(self):
        """history(multiplyComplex_sptr self) -> unsigned int"""
        return _steeringVector_swig.multiplyComplex_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiplyComplex_sptr self, int which, int delay)
        declare_sample_delay(multiplyComplex_sptr self, unsigned int delay)
        """
        return _steeringVector_swig.multiplyComplex_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(multiplyComplex_sptr self, int which) -> unsigned int"""
        return _steeringVector_swig.multiplyComplex_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(multiplyComplex_sptr self) -> int"""
        return _steeringVector_swig.multiplyComplex_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(multiplyComplex_sptr self) -> double"""
        return _steeringVector_swig.multiplyComplex_sptr_relative_rate(self)


    def start(self):
        """start(multiplyComplex_sptr self) -> bool"""
        return _steeringVector_swig.multiplyComplex_sptr_start(self)


    def stop(self):
        """stop(multiplyComplex_sptr self) -> bool"""
        return _steeringVector_swig.multiplyComplex_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(multiplyComplex_sptr self, unsigned int which_input) -> uint64_t"""
        return _steeringVector_swig.multiplyComplex_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(multiplyComplex_sptr self, unsigned int which_output) -> uint64_t"""
        return _steeringVector_swig.multiplyComplex_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(multiplyComplex_sptr self) -> int"""
        return _steeringVector_swig.multiplyComplex_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(multiplyComplex_sptr self, int m)"""
        return _steeringVector_swig.multiplyComplex_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiplyComplex_sptr self)"""
        return _steeringVector_swig.multiplyComplex_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiplyComplex_sptr self) -> bool"""
        return _steeringVector_swig.multiplyComplex_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(multiplyComplex_sptr self, int m)"""
        return _steeringVector_swig.multiplyComplex_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(multiplyComplex_sptr self) -> int"""
        return _steeringVector_swig.multiplyComplex_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(multiplyComplex_sptr self, int i) -> long"""
        return _steeringVector_swig.multiplyComplex_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiplyComplex_sptr self, long max_output_buffer)
        set_max_output_buffer(multiplyComplex_sptr self, int port, long max_output_buffer)
        """
        return _steeringVector_swig.multiplyComplex_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(multiplyComplex_sptr self, int i) -> long"""
        return _steeringVector_swig.multiplyComplex_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiplyComplex_sptr self, long min_output_buffer)
        set_min_output_buffer(multiplyComplex_sptr self, int port, long min_output_buffer)
        """
        return _steeringVector_swig.multiplyComplex_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiplyComplex_sptr self, int which) -> float
        pc_input_buffers_full(multiplyComplex_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.multiplyComplex_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiplyComplex_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiplyComplex_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.multiplyComplex_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiplyComplex_sptr self, int which) -> float
        pc_input_buffers_full_var(multiplyComplex_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.multiplyComplex_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiplyComplex_sptr self, int which) -> float
        pc_output_buffers_full(multiplyComplex_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.multiplyComplex_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiplyComplex_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiplyComplex_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.multiplyComplex_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiplyComplex_sptr self, int which) -> float
        pc_output_buffers_full_var(multiplyComplex_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.multiplyComplex_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(multiplyComplex_sptr self) -> float"""
        return _steeringVector_swig.multiplyComplex_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(multiplyComplex_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _steeringVector_swig.multiplyComplex_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(multiplyComplex_sptr self)"""
        return _steeringVector_swig.multiplyComplex_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(multiplyComplex_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _steeringVector_swig.multiplyComplex_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(multiplyComplex_sptr self) -> int"""
        return _steeringVector_swig.multiplyComplex_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(multiplyComplex_sptr self) -> int"""
        return _steeringVector_swig.multiplyComplex_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(multiplyComplex_sptr self, int priority) -> int"""
        return _steeringVector_swig.multiplyComplex_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(multiplyComplex_sptr self) -> std::string"""
        return _steeringVector_swig.multiplyComplex_sptr_name(self)


    def symbol_name(self):
        """symbol_name(multiplyComplex_sptr self) -> std::string"""
        return _steeringVector_swig.multiplyComplex_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(multiplyComplex_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.multiplyComplex_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(multiplyComplex_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.multiplyComplex_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(multiplyComplex_sptr self) -> long"""
        return _steeringVector_swig.multiplyComplex_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(multiplyComplex_sptr self) -> basic_block_sptr"""
        return _steeringVector_swig.multiplyComplex_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(multiplyComplex_sptr self, int ninputs, int noutputs) -> bool"""
        return _steeringVector_swig.multiplyComplex_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(multiplyComplex_sptr self) -> std::string"""
        return _steeringVector_swig.multiplyComplex_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(multiplyComplex_sptr self, std::string name)"""
        return _steeringVector_swig.multiplyComplex_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(multiplyComplex_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _steeringVector_swig.multiplyComplex_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(multiplyComplex_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.multiplyComplex_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(multiplyComplex_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.multiplyComplex_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(multiplyComplex_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _steeringVector_swig.multiplyComplex_sptr_message_subscribers(self, which_port)

multiplyComplex_sptr_swigregister = _steeringVector_swig.multiplyComplex_sptr_swigregister
multiplyComplex_sptr_swigregister(multiplyComplex_sptr)


multiplyComplex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiplyComplex = multiplyComplex.make;

class messageAtThreshold_ff(object):
    """Proxy of C++ gr::steeringVector::messageAtThreshold_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(recalcPhase, recalcSample, iterationCount, initial_state, phaseThresholdCount):
        """make(bool recalcPhase, bool recalcSample, int iterationCount, int initial_state, int phaseThresholdCount) -> messageAtThreshold_ff_sptr"""
        return _steeringVector_swig.messageAtThreshold_ff_make(recalcPhase, recalcSample, iterationCount, initial_state, phaseThresholdCount)

    make = staticmethod(make)

    def set_recalcPhase(self, b):
        """set_recalcPhase(messageAtThreshold_ff self, bool b)"""
        return _steeringVector_swig.messageAtThreshold_ff_set_recalcPhase(self, b)


    def set_recalcSample(self, b):
        """set_recalcSample(messageAtThreshold_ff self, bool b)"""
        return _steeringVector_swig.messageAtThreshold_ff_set_recalcSample(self, b)

    __swig_destroy__ = _steeringVector_swig.delete_messageAtThreshold_ff
    __del__ = lambda self: None
messageAtThreshold_ff_swigregister = _steeringVector_swig.messageAtThreshold_ff_swigregister
messageAtThreshold_ff_swigregister(messageAtThreshold_ff)

def messageAtThreshold_ff_make(recalcPhase, recalcSample, iterationCount, initial_state, phaseThresholdCount):
    """messageAtThreshold_ff_make(bool recalcPhase, bool recalcSample, int iterationCount, int initial_state, int phaseThresholdCount) -> messageAtThreshold_ff_sptr"""
    return _steeringVector_swig.messageAtThreshold_ff_make(recalcPhase, recalcSample, iterationCount, initial_state, phaseThresholdCount)

class messageAtThreshold_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::steeringVector::messageAtThreshold_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::steeringVector::messageAtThreshold_ff)> self) -> messageAtThreshold_ff_sptr
        __init__(boost::shared_ptr<(gr::steeringVector::messageAtThreshold_ff)> self, messageAtThreshold_ff p) -> messageAtThreshold_ff_sptr
        """
        this = _steeringVector_swig.new_messageAtThreshold_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(messageAtThreshold_ff_sptr self) -> messageAtThreshold_ff"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr___deref__(self)

    __swig_destroy__ = _steeringVector_swig.delete_messageAtThreshold_ff_sptr
    __del__ = lambda self: None

    def make(self, recalcPhase, recalcSample, iterationCount, initial_state, phaseThresholdCount):
        """make(messageAtThreshold_ff_sptr self, bool recalcPhase, bool recalcSample, int iterationCount, int initial_state, int phaseThresholdCount) -> messageAtThreshold_ff_sptr"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_make(self, recalcPhase, recalcSample, iterationCount, initial_state, phaseThresholdCount)


    def set_recalcPhase(self, b):
        """set_recalcPhase(messageAtThreshold_ff_sptr self, bool b)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_recalcPhase(self, b)


    def set_recalcSample(self, b):
        """set_recalcSample(messageAtThreshold_ff_sptr self, bool b)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_recalcSample(self, b)


    def history(self):
        """history(messageAtThreshold_ff_sptr self) -> unsigned int"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(messageAtThreshold_ff_sptr self, int which, int delay)
        declare_sample_delay(messageAtThreshold_ff_sptr self, unsigned int delay)
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(messageAtThreshold_ff_sptr self, int which) -> unsigned int"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(messageAtThreshold_ff_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(messageAtThreshold_ff_sptr self) -> double"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_relative_rate(self)


    def start(self):
        """start(messageAtThreshold_ff_sptr self) -> bool"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_start(self)


    def stop(self):
        """stop(messageAtThreshold_ff_sptr self) -> bool"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(messageAtThreshold_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(messageAtThreshold_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(messageAtThreshold_ff_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(messageAtThreshold_ff_sptr self, int m)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(messageAtThreshold_ff_sptr self)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(messageAtThreshold_ff_sptr self) -> bool"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(messageAtThreshold_ff_sptr self, int m)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(messageAtThreshold_ff_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(messageAtThreshold_ff_sptr self, int i) -> long"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(messageAtThreshold_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(messageAtThreshold_ff_sptr self, int port, long max_output_buffer)
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(messageAtThreshold_ff_sptr self, int i) -> long"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(messageAtThreshold_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(messageAtThreshold_ff_sptr self, int port, long min_output_buffer)
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(messageAtThreshold_ff_sptr self, int which) -> float
        pc_input_buffers_full(messageAtThreshold_ff_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(messageAtThreshold_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(messageAtThreshold_ff_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(messageAtThreshold_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(messageAtThreshold_ff_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(messageAtThreshold_ff_sptr self, int which) -> float
        pc_output_buffers_full(messageAtThreshold_ff_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(messageAtThreshold_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(messageAtThreshold_ff_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(messageAtThreshold_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(messageAtThreshold_ff_sptr self) -> pmt_vector_float
        """
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(messageAtThreshold_ff_sptr self) -> float"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(messageAtThreshold_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(messageAtThreshold_ff_sptr self)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(messageAtThreshold_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(messageAtThreshold_ff_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(messageAtThreshold_ff_sptr self) -> int"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(messageAtThreshold_ff_sptr self, int priority) -> int"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(messageAtThreshold_ff_sptr self) -> std::string"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(messageAtThreshold_ff_sptr self) -> std::string"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(messageAtThreshold_ff_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(messageAtThreshold_ff_sptr self) -> io_signature_sptr"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(messageAtThreshold_ff_sptr self) -> long"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(messageAtThreshold_ff_sptr self) -> basic_block_sptr"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(messageAtThreshold_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(messageAtThreshold_ff_sptr self) -> std::string"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(messageAtThreshold_ff_sptr self, std::string name)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(messageAtThreshold_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(messageAtThreshold_ff_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(messageAtThreshold_ff_sptr self) -> swig_int_ptr"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(messageAtThreshold_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _steeringVector_swig.messageAtThreshold_ff_sptr_message_subscribers(self, which_port)

messageAtThreshold_ff_sptr_swigregister = _steeringVector_swig.messageAtThreshold_ff_sptr_swigregister
messageAtThreshold_ff_sptr_swigregister(messageAtThreshold_ff_sptr)


messageAtThreshold_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
messageAtThreshold_ff = messageAtThreshold_ff.make;



